"""
1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n 
para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero
que indique el usuario
"""

def factorial(num):
    return 1 if num == 0 else num * factorial(num-1)

print("\nCalcularemos el factorial de todos los numeros entre 1 y el numero por Ud. ingrresado")
num = int(input("Ingrese un numero entero positivo: "))

for i in range(1, num+1):
    print(f" El factorial de {i} es: {factorial(i)}")


"""
2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. 
Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.
"""    

def fibonacci(pos):
    if pos == 0:
        return 0
    elif pos == 1:
        return 1 
    else: 
        return fibonacci(pos-1) + fibonacci(pos-2)

pos = int(input("\nIngrese la posici√≥n de la serie sobre la cual desea conocer su valor: "))

fibo = []
for i in range(pos+1):
    fibo.append(fibonacci(i))


print(f"\nEl valor que corresponde en la serie a la posici√≥n {pos} es: {fibonacci(pos)}")
print(f"\nLa serie completa hasta la posici√≥n indicada es: {fibo}")

"""
3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, 
utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëö(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.
"""

def potencia(base, exp):
    if exp == 0:
        return 1
    else:
        return base * potencia(base, exp-1)
    
print("\nEleve cualquier numero a cualquier potencia\n")

base = float(input("Ingrese el numero a elevar: "))
exp = float(input("Ingrese el exponenete: "))

print(f"\nEl numero {base} elevado al exponente {exp}, nos da : {potencia(base,exp):.2f}")


"""
4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n 
en binario como una cadena de texto.
Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y unos (1), en base 2. 
Para convertir un n√∫mero decimal a binario, se puede seguir este procedimiento:
1. Dividir el n√∫mero por 2.
2. Guardar el resto (0 o 1).
3. Repetir el proceso con el cociente hasta que llegue a 0.
4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.

"""

def convertir_dec_bin(num):
    
    if num == 0:
        return ""
    else:
        if num % 2 == 0:
            binario = "0"
            return convertir_dec_bin(num//2) + binario
        else:
            binario = "1"
            return convertir_dec_bin(num//2) + binario
print("\nRepresentamos un numero en base 10 (decimal), en un numero en base 2 (binario)\n")
num=int(input("Ingrese el n√∫mero que desea representar en base 2: "))
print(f"\nEl n√∫mero {num} en base 10, se representa como {convertir_dec_bin(num)} en base 2")
        

"""
5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto 
sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed().
"""

def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    elif palabra[0] != palabra[-1]:
        return False
    else:
        return es_palindromo(palabra[1:-1])
print("\nEs un pol√≠ndromo?\n")
palabra = input("Ingrese una palabra o frase sin espacios ni tildes: ")
print(f"\nEs {es_palindromo(palabra)} que la palabra '{palabra}' es un pal√≠ndromo")


"""
6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y 
devuelva la suma de todos sus d√≠gitos.
Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
suma_digitos(9) ‚Üí 9
suma_digitos(305) ‚Üí 8 (3 + 0 + 5)

"""

def suma_digitos(num):
    
    if num % 10 == 0 and (num //10) < 1:
        return num
    else:
        suma=0
        suma += num % 10
        
    return suma + suma_digitos(num//10)
print("\nSumando los digitos de un numero entero positivo\n")
num=int(input("Ingrese un numero entero positivo: "))    
print(f"\nLa suuma de los d√≠gitos del nmumero '{num}' es: {suma_digitos(num)}")


"""
7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, 
en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva 
el total de bloques que necesita para construir toda la pir√°mide.
Ejemplos:
contar_bloques(1) ‚Üí 1 (1)
contar_bloques(2) ‚Üí 3 (2 + 1)
contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)
"""

def contar_bloques(num):
    if num == 1:
        return 1
    else:
        suma = 0
        suma += num
        return suma + contar_bloques(num-1)
    
print("\nCalculamos la cantidad de cubos de una pir√°mite, a partir de la cantidad de cubos de su base\n")
base = int(input("Ingrese la cantidad de cubos de la base de la pir√°mide: "))
print(f"\nPara hacer una pir√°mide con {base} cubos de base, Ud. necesitar√° {contar_bloques(base)} cubos en total")


"""
8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo
(numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
Ejemplos:
contar_digito(12233421, 2) ‚Üí 3
contar_digito(5555, 5) ‚Üí 4
contar_digito(123456, 7) ‚Üí 0
"""

def contar_digito(num,dig):
    if num % 10 == dig and (num // 10) < 1:
        return 1
    elif num // 10 < 1:
        return 0 
    else:
        contar = 0
        if num % 10 == dig:
             contar += 1
        
    return contar + contar_digito(num//10,dig)

print("\nBuscamos cuantas veces se repite un digito dado, en un numero entero positivo especificado\n")
num = int(input("Ingrese un numero entero positivo: "))
dig = int(input("Ingrese el digito a verificar: "))
print(f"\nEl d√≠gito '{dig}' aparece {contar_digito(num,dig)} veces en el n√∫mero {num}")
